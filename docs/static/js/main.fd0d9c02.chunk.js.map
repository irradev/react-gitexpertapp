{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","c","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","q","encodeURI","urlSearch","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","cat","ReactDOM","render","document","getElementById"],"mappings":"6LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAgB9C,OACI,sBACIC,SAVa,SAACC,GAClBA,EAAEC,iBACwB,KAAtBJ,EAAWK,SACXP,GAAc,SAAAQ,GAAC,OAAKN,GAAL,mBAAoBM,OACnCL,EAAc,MAKlB,SAGI,uBACIM,KAAK,OACLC,MAAQR,EACRS,SAnBa,SAACN,GACtBF,EAAcE,EAAEO,OAAOF,a,QCNlBG,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAChC,OACI,sBAAKC,UAAU,6CAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNHK,EAAO,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,4DACJ,mCACTC,EAAIC,UAAUH,GACN,KACRI,EAJa,uDACJ,mCADI,cAI2DF,EAJ3D,kBAGL,MAHK,SAMAG,MAAMD,GANN,cAMbE,EANa,gBAOIA,EAAKC,OAPT,uBAOXC,EAPW,EAOXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRlB,MAAOiB,EAAIjB,MACXC,IAAG,UAAEgB,EAAIE,cAAN,aAAE,EAAYC,iBAAiBnB,QAbvB,kBAiBZc,GAjBY,4CAAH,sDCIPM,EAAU,SAAC,GAAgB,IAAff,EAAc,EAAdA,SAAc,ECAX,SAAEA,GAAe,IAAD,EAEdnB,mBAAS,CAC/B2B,KAAM,GACNQ,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAkBxC,OAXAC,qBAAW,WAEPpB,EAAQC,GAAUoB,MAAM,SAAAC,GACpBH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAIlB,CAAChB,IAEGiB,EDhB0BK,CAAatB,GAAjCa,EAFsB,EAE3BL,KAAaQ,EAFc,EAEdA,QAErB,OACI,qCACI,oBAAIpB,UAAU,wCAAd,SAAuDI,IAErDgB,GAAW,mBAAGpB,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQiB,EAAOH,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAESA,GADAA,EAAIC,aEiBtBW,EA/BM,WAAM,MAIa1C,mBAAS,CAAC,cAJvB,mBAIhB2C,EAJgB,KAIJ5C,EAJI,KAWvB,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ4C,EAAWd,KAAI,SAAAe,GAAG,OACd,cAAC,EAAD,CAEIzB,SAAUyB,GADLA,YCnBjCC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.fd0d9c02.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChane = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim() !== '') {\n            setCategories(c => [inputValue, ...c]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form\n            onSubmit={handleSubmit}\n        >\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChane }\n            />\n        </form>\n    );\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired,\n}","import React from 'react'\n\nexport const GifGridItem = ({title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__backInDown\">\n            <img src={url} alt={title} />\n            <p>{title}</p> \n        </div>\n    )\n}\n","export const getGifs = async( category ) => {\n    const apiKey = 'SL4BS0LSOYDy5mmzH9xsjHJd9Mp6AR14';\n    const q = encodeURI(category);\n    const limit = '10';\n    const urlSearch = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${q}&limit=${limit}`;\n\n    const resp = await fetch(urlSearch);\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n        }\n    });\n\n    return gifs;\n}","import React from 'react'\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nexport const GifGrid = ({category}) => {\n    \n    const { data:images, loading } = useFetchGifs(category);  \n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__backInDown\">{category}</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n            <div className=\"card-grid\">\n                {\n                    images.map(img => (\n                        <GifGridItem  \n                            key={img.id}\n                            { ...img }\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        \n        getGifs(category).then( imgs => {\n            setState({\n                data: imgs,\n                loading: false,\n            });\n        });\n\n    }, [category]);\n    \n    return state;\n\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n\n    const [categories, setCategories] = useState(['Samurai X']);\n\n    // const handleAdd = () => {\n    //     // setCategories(['HunterXHunter', ...categories]);\n    //     setCategories(cats => ['HunterXHunter', ...cats]);\n    // }\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n            <ol>\n                {\n                    categories.map(cat => (\n                        <GifGrid \n                            key={cat}\n                            category={cat}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <GifExpertApp />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}